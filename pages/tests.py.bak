import string
import random

from django.test import TestCase
from django.test import LiveServerTestCase
from django.core.exceptions import ValidationError
from django.core.urlresolvers import resolve, reverse
from django.test import Client
from selenium.webdriver.firefox.webdriver import WebDriver

from .models import Page
from .urls import urlpatterns
from . import views

class PageMthodTests(TestCase):
    def test_create_slug(self):
        """
        page should create slug
        """
    
        slug = ''.join(random.SystemRandom().choice(string.ascii_lowercase + string.digits) for _ in range(12))

        page = Page(title=slug)
        page.save()

        self.assertNotEqual(page.slug, "")
    
        

    def test_create_unique_slug(self):
        """
        page should create a unique slug on save
        """

        slug = ''.join(random.SystemRandom().choice(string.ascii_lowercase + string.digits) for _ in range(12))

        page_one = Page(title=slug)
        page_one.save()
        
        page_two = Page(title=slug)
        page_two.save()

        self.assertNotEqual(page_one.slug, page_two.slug)

    def test_unique_slug_incrementing(self):
        """
        page should increment unique slug
        """
        
        slug = ''.join(random.SystemRandom().choice(string.ascii_lowercase + string.digits) for _ in range(12))

        page_one = Page(title=slug)
        page_one.save()
        
        page_two = Page(title=slug)
        page_two.save()

        page_three = Page(title=slug)
        page_three.save()
        
        self.assertEqual(page_three.slug, '%s-2' % slug)

    def test_limit_slug_incrementing(self):
        """
        page should limit incrementing to 100 tries, cus something has gone wrong at that point
        """

        slug = ''.join(random.SystemRandom().choice(string.ascii_lowercase + string.digits) for _ in range(12))
        
        for i in range(100):
            page = Page(title=slug)
            page.save()

        page = Page(title=slug)
        
        with self.assertRaises(ValidationError):
            page.save()

            

    def test_only_one_home_page(self):
        """
        page should make sure only one object is the homepage
        """
        
        page_one = Page(title='page one', home_page=True)
        page_one.save()

        page_two = Page(title='page two', home_page=True)
        page_two.save()

        page_check = Page.objects.get(title='page one')

        self.assertNotEqual(page_check.home_page, True)


class PageURLTests(TestCase):
    def test_homepage(self):
        """
        homepage url mapping works
        """
        
        res = resolve('/')
        self.assertEqual(res.view_name, 'index')

    def test_slug(self):
        """
        slug url mapping works
        """

        res = resolve('/slugtest/')
        self.assertEqual(res.view_name, 'slugview')


"""
class MySeleniumTests(LiveServerTestCase):
    port = '8000'

    @classmethod
    def setUpClass(cls):
        super(MySeleniumTests, cls).setUpClass()
        cls.selenium = WebDriver()

    @classmethod
    def tearDownClass(cls):
        cls.selenium.quit()
        super(MySeleniumTests, cls).tearDownClass()

    def test_login(self):
        self.selenium.get('%s' % (self.live_server_url))
        self.selenium.find_element_by_xpath('//*[@id="bob"]')
"""
